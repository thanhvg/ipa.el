#+startup:    content indent

* DONE project wise annotations
 project-current

project-current is an autoloaded compiled Lisp function in ‘project.el’.

(project-current &optional MAYBE-PROMPT DIR)

Return the project instance in DIR or ‘default-directory’.
When no project found in DIR, and MAYBE-PROMPT is non-nil, ask
the user for a different directory to look in.  If that directory
is not a part of a detectable project either, return a
‘transient’ project instance rooted in it.
#+begin_src elisp
(let ((root (cdr (project-current))))
  (setq-local
   flycheck-clang-include-path (list (expand-file-name "dir/includes" root)
                                     (expand-file-name "dir/src" root))))
#+end_src

* DONE when on project ipa file should not use absolute path
use this to tell project option is set
  (equal ipa-file-function 'ipa-get-project-file)

make ipa-get-buffer-file-name return path relative from root
make  ipa-go-to-annotation aware of this too
* DONE reloading buffer duplicates annotations
  fix: use before-revert-hook
* DONE ipa-show-all can be called anywhere
currently if buffer has no anotations it's not possible to call
fixed: add ipa-show-all
* TODO ipa-show should show only annotation of the current buffer
* TODO ipa file can be org file
  and the ipa-mode now is minor mode
* DONE ipa-delete function
delete above
delete bellow
* DONE minor mode
  make ipa-mode
  can't make it a global mode because some mode such as helm-mode is incompatible with

* DONE remove ipa-toggle and ipa-annotation-display
now that it's a minor mode, ipa-toggle is working all buffers
we need ipa-clear on current buffer
* TODO handle overlays when text changes
symbol-overlays uses
(add-hook 'after-change-functions 'symbol-overlay-refresh)

add ipa-refresh for manual action

* DONE multiline support on edit/insert comments  with evil :TIL:
make minibuffer to work as a normal buffer. This one can be useful as a lib
#+begin_src elisp
;; https://stackoverflow.com/questions/16992726/how-to-prompt-the-user-for-a-block-of-text-in-elisp
(defun ipa--read-string-with-multiple-line (prompt pre-string exit-keyseq clear-keyseq)
  "Read multiline from minibuffer.
PROMPT with PRE_STRING binds EXIT-KEYSQ to submit binds CLEAR-KEYSQ to clear text."
  (let ((keymap (copy-keymap minibuffer-local-map))
        ;; enable evil in minibuffer
        ;; https://github.com/emacs-evil/evil/pull/1059
        (evil-want-minibuffer t))
    (define-key keymap (kbd "RET") 'newline)
    (define-key keymap exit-keyseq 'exit-minibuffer)
    (define-key keymap clear-keyseq
      (lambda () (interactive) (delete-region (minibuffer-prompt-end) (point-max))))
    (read-from-minibuffer prompt pre-string keymap)))
#+end_src
* TODO annotation on region, drop inline annotations
* TODO why the comments are not attached to any string in buffer
delete string, comment remains
comments must stick to string

you need to listen to change hooks
* DONE indent incorrect on edit above
[[file:ipa.el::(defun ipa-set-overlay-text-above (overlay text)][indent]] value is not on the desired line on ipa-edit above (previous)
because cursor is put on the line above

fix: in ipa-edit when use ipa-previous, run also forward-char 

this is not a very clean fix
* TODO understand how IPL mode works
** how font lock works
done
** how we load data
* TODO drop in place only use inline comment
(line-number-at-pos)
format
filename
linenume:comment
use \a as newline signature

#+begin_src 
^Lfile 1
123:this is the comment
this is the comment on the second line
\a\n

number:whatever between till \a\n
#+end_src
* drop persistent data in text format, new architechture virtual-inline-comment
because parsing the text file is tedious store in elisp format and have a
special mode to read it and show it in a buffer.

persistent file is project based or global

must have something like project based management mechanism to share 

such as tide.

when a buffer with icl mode on started up it will locate its project root which resolves
to global or project root. The project root is now a unique key to indentify the comment store

there is a global comment store which is a map of project  root -> project comment store

project comment store:
- comments: (file (line . comment)...)
- count: number of active buffers reading this store, when is is down to zero comments will be set to nil
- hook: this hook runs on store changed

** use case:
in project A, buffer a starts up and gets its project unique key as A,
From the global comment stores it gets it project comment store.
It is nil and the count is now set to 0.
With the count value it knows that it is the first one to access this store. 
It updates the count to one and initializes comments value for project.
Then it reads the comments from the store and show the commnents in buffers.

Next a buffer b in project A starts up, and follows the same procedure but the
count is already greater than 0 so it means the project commnent store is
already set up to go. So buffer b will just use the store and increase the count.

Some time later buffer b closes, it will decrease the count. It check the count
is still greater than 0

And finally buffer a is about to close. After decreasing the count to 0, that
means it is the last consumer of the store so it set the commnent variable to
nil. Persist the data to a .ilc file

No memory leak this way.






